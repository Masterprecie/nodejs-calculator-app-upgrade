import e from"readline";function t(e,t){return e+t}function n(e,t){return e-t}function r(e,t){return e*t}function i(e,t){if(t===0)throw Error(`Division by zero!`);return e/t}function a(e,t){return e**+t}function o(e){if(e<0)throw Error(`Cannot find square root of negative number!`);return Math.sqrt(e)}function s(e,t){return e/t*100}const c=e.createInterface({input:process.stdin,output:process.stdout}),l=[];let u=null;function d(){console.log(` Welcome to Dev_Presh Node.js Calculator!`)}function f(){console.log(`Select an operation:`),console.log(`1. Add`),console.log(`2. Subtract`),console.log(`3. Multiply`),console.log(`4. Divide`),console.log(`5. Power`),console.log(`6. Square Root`),console.log(`7. Percentage`),console.log(`8. View History`),console.log(`9. Store Last Result to Memory`),console.log(`10. Recall Memory`),console.log(`11. Clear Memory`),console.log(`12. Exit
`)}console.log(`eelo`);function p(e,t=!1){return new Promise(n=>{c.question(e,r=>{if(r.toLowerCase()===`m`)u===null?(console.log(`No value in memory.
`),p(e,t).then(n)):(console.log(`Using stored memory value: ${u}`),n(u));else if(t&&r.toLowerCase()===`r`)h===null?(console.log(`No previous result available.
`),p(e,t).then(n)):(console.log(`Using previous result: ${h}`),n(h));else{let i=parseFloat(r);isNaN(i)?(console.log(`Invalid number. Try again.`),p(e,t).then(n)):n(i)}})})}function m(e){switch(e){case`1`:return`+`;case`2`:return`-`;case`3`:return`×`;case`4`:return`÷`;case`5`:return`^`;case`6`:return`√`;case`7`:return`%`;default:return``}}let h=null;async function g(){for(d();;)f(),await new Promise(e=>{c.question(`Enter your choice (1-12): `,async d=>{if(!`123456789101112`.includes(d))return console.log(` Invalid choice. Select between 1-12.
`),e();if(d===`12`&&(console.log(`
 Thanks for using Dev_Presh Node.js Calculator. See you another time!`),c.close(),process.exit(0)),d===`8`)return console.log(`
 Calculation History:`),l.length===0?console.log(` No history yet.
`):l.forEach((e,t)=>{let n=e.operand2===void 0?`${e.operation}${e.operand1} = ${e.result}`:`${e.operand1} ${e.operation} ${e.operand2} = ${e.result}`;console.log(` ${t+1}. ${n}`)}),console.log(``),e();if(d===`9`)return h===null?console.log(` No result to store.
`):(u=h,console.log(`Stored ${u} in memory.\n`)),e();if(d===`10`)return u===null?console.log(` Memory is empty.
`):console.log(` Memory value: ${u}\n`),e();if(d===`11`)return u=null,console.log(` Memory cleared.
`),e();let f,g,_=0,v;try{if(d===`6`)f=await p(`Enter a number (or M for memory, R for result): `,!0),_=o(f),console.log(`\n Result: ${_}\n`),v={operation:m(d),operand1:f,result:_},l.push(v);else{switch(f=await p(`Enter first number (or M for memory, R for result): `,!0),g=await p(`Enter second number (or M for memory, R for result): `,!0),d){case`1`:_=t(f,g);break;case`2`:_=n(f,g);break;case`3`:_=r(f,g);break;case`4`:_=i(f,g);break;case`5`:_=a(f,g);break;case`7`:_=s(f,g)+` %`;break;default:_=0;break}console.log(`\n Result: ${_}\n`),v={operation:m(d),operand1:f,operand2:g,result:_},l.push(v)}h=typeof _==`string`&&_.includes(`Error`)?null:typeof _==`number`?_:parseFloat(_)}catch(e){e instanceof Error?(console.log(`\n Error: ${e.message}\n`),h=null):(console.log(`
 Unknown error occurred.
`),h=null)}e()})})}g();